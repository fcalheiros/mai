#!/bin/bash

# Default configurations
API_KEY=""
URL="https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent"
OUTPUT_DIR="$HOME/maiout"
VERSION="0.1"

# Configuration directories and files
CONFIG_DIR="$HOME/.local/.mai"
CONFIG_FILE="$CONFIG_DIR/mai.conf"
HISTORY_FILE="$CONFIG_DIR/history.json"
LOG_FILE="$OUTPUT_DIR/mai.log"

# Function to create the configuration file
create_config() {
  mkdir -p "$CONFIG_DIR"
  echo "Enter your API key:"
  read API_KEY
  echo "API_KEY=$API_KEY" > "$CONFIG_FILE"
  echo "URL=$URL" >> "$CONFIG_FILE"
  echo "OUTPUT_DIR=$HOME/maiout" >> "$CONFIG_FILE"
}

# Check if the configuration file exists
if [ ! -f "$CONFIG_FILE" ]; then
  create_config
fi

# Function to read configurations from mai.conf
read_config() {
  while IFS='=' read -r key value; do
    case "$key" in
      API_KEY) API_KEY="$value" ;;
      URL) URL="$value" ;;
      OUTPUT_DIR) OUTPUT_DIR="$value" ;;
    esac
  done < "$CONFIG_FILE"
}

# Read configurations
read_config

# Check if API_KEY is configured
if [ -z "$API_KEY" ]; then
  echo "Error: API_KEY not configured in $CONFIG_FILE"
  exit 1
fi

# Function to display help message
show_help() {
  echo "Usage: $0 \"your text here\" [file] [options]"
  echo ""
  echo "Options:"
  echo "  --debug     Display debug information."
  echo "  --new, -n   Start a new conversation, clearing history."
  echo "  --help, -h  Display this help message."
  echo "  --version   Display script version."
  echo "  --config    Edit the configuration file."
  echo "  --log       Enable log recording."
  exit 0
}

# Function to edit the configuration file
edit_config() {
  if [ -f "$CONFIG_FILE" ]; then
    echo "Opening configuration file..."
    ${EDITOR:-nano} "$CONFIG_FILE" # Opens default editor or nano
    if [ $? -eq 0 ]; then
      echo "Configuration file saved."
    else
      echo "Error editing configuration file."
    fi
  else
    echo "Configuration file not found. Run the script first to create it."
  fi
}

# Check if --version option was provided
if [ "$1" == "--version" ]; then
  echo "mai version: $VERSION"
  exit 0
fi

# Check for --debug, --new, and --help options
DEBUG_MODE=false
NEW_CONVERSATION=false
ENABLE_LOG=false
ARGS=()
for arg in "$@"; do
  if [ "$arg" == "--debug" ]; then
    DEBUG_MODE=true
  elif [ "$arg" == "--new" ] || [ "$arg" == "-n" ]; then
    NEW_CONVERSATION=true
  elif [ "$arg" == "--help" ] || [ "$arg" == "-h" ]; then
    show_help
  elif [ "$arg" == "--config" ]; then
    edit_config
    exit 0
  elif [ "$arg" == "--log" ]; then
    ENABLE_LOG=true
  else
    ARGS+=("$arg")
  fi
done

# Clear history if --new option is provided
if $NEW_CONVERSATION; then
  echo "[]" > "$HISTORY_FILE"
  echo "New conversation started."
fi

# Check if text was provided as argument
if [ -z "${ARGS[0]}" ]; then
  if $NEW_CONVERSATION; then
    exit 0 # If --new, and no text, exit after clearing history.
  else
    show_help # Display help message if no text is provided.
  fi
fi

TEXT="${ARGS[0]}"
FILE="${ARGS[1]}"

# Create output directory if it doesn't exist
mkdir -p "$OUTPUT_DIR"

# Function to read conversation history
read_history() {
  if [ -f "$HISTORY_FILE" ] && ! $NEW_CONVERSATION; then # Don't read history if --new
    cat "$HISTORY_FILE"
  else
    echo "[]" # Return empty array if file doesn't exist or --new
  fi
}

# Assemble JSON request body
if [ -n "$FILE" ]; then
  # If a file was provided, encode it in base64
  MIME_TYPE=$(file -b --mime-type "$FILE")
  BASE64_DATA=$(base64 -w 0 "$FILE")

  HISTORY=$(read_history)
  DATA=$(cat <<EOF
{
  "contents": $(echo "$HISTORY" | jq --arg text "$TEXT" --arg mimeType "$MIME_TYPE" --arg data "$BASE64_DATA" '. + [{"role": "user", "parts": [{"text": $text}, {"inlineData": {"mimeType": $mimeType, "data": $data}}]}]')
}
EOF
)
else
  # If no file was provided, send only the text
  HISTORY=$(read_history)
  DATA=$(cat <<EOF
{
  "contents": $(echo "$HISTORY" | jq --arg text "$TEXT" '. + [{"role": "user", "parts": [{"text": $text}]}]')
}
EOF
)
fi

# Assemble complete request
REQUEST_COMMAND="curl -s -X POST -H \"Content-Type: ${CONTENT_TYPE}\" -d '${DATA}' \"${URL}?key=${API_KEY}\""

# Make the request
RESPONSE=$(eval "${REQUEST_COMMAND}")

# Debug mode
if $DEBUG_MODE; then
  echo "Request:" > "$OUTPUT_DIR/debug.log"
  echo "$REQUEST_COMMAND" >> "$OUTPUT_DIR/debug.log"
  echo "" >> "$OUTPUT_DIR/debug.log"
  echo "Full response:" >> "$OUTPUT_DIR/debug.log"
  echo "$RESPONSE" >> "$OUTPUT_DIR/debug.log"
  echo "Full response saved to: $OUTPUT_DIR/debug.log"
fi

# Extract text and files with jq
TEXT_RESPONSE=$(echo "$RESPONSE" | jq -r '.candidates[0].content.parts[] | select(.text) | .text')
FILES=$(echo "$RESPONSE" | jq -r '.candidates[0].content.parts[] | select(.inlineData) | .inlineData')

# Display the text
echo "${TEXT_RESPONSE}"

# Process files
if [ -n "$FILES" ]; then
  while IFS= read -r FILE_DATA; do
    MIME_TYPE=$(echo "$FILE_DATA" | jq -r '.mimeType')
    BASE64_DATA=$(echo "$FILE_DATA" | jq -r '.data')
    EXT=$(echo "$MIME_TYPE" | sed 's/.*\///') # Extract extension from MIME type
    OUTPUT_FILE="$OUTPUT_DIR/output_$(date +%s).$EXT" # Generate unique file name
    echo "$BASE64_DATA" | base64 -d > "$OUTPUT_FILE"
    echo "File saved: $OUTPUT_FILE"
  done <<< "$FILES"
fi

# Save updated history
if ! $NEW_CONVERSATION; then # Don't save history if --new
  echo "$(echo "$HISTORY" | jq --arg text "$TEXT" --arg response "$TEXT_RESPONSE" '. + [{"role": "user", "parts": [{"text": $text}]}, {"role": "model", "parts": [{"text": $response}]}]')" > "$HISTORY_FILE"
fi

# Log recording
if $ENABLE_LOG; then
  echo "$(date): $TEXT -> $TEXT_RESPONSE" >> "$LOG_FILE"
fi

